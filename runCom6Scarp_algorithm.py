# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AvaFrameRunCom1DFA
                                 A QGIS plugin
 Connects to AvaFrame
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-26
        copyright            : (C) 2021 by AvaFrame Team
        email                : felix@avaframe.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "AvaFrame Team"
__date__ = "2025"
__copyright__ = "(C) 2025 by AvaFrame Team"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

from pathlib import Path

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (
    QgsProcessing,
    QgsRasterLayer,
    QgsProcessingException,
    QgsProcessingAlgorithm,
    QgsProcessingContext,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterRasterLayer,
    QgsProcessingParameterEnum,
    QgsProcessingParameterMultipleLayers,
    QgsProcessingParameterFolderDestination,
    QgsProcessingOutputVectorLayer,
    QgsProcessingParameterDefinition,
    QgsProcessingOutputMultipleLayers,
)


class runCom6ScarpAlgorithm(QgsProcessingAlgorithm):
    """
    This is the AvaFrame Connection, i.e. the part running with QGis. For this
    connector to work, more installation is needed. See instructions at docs.avaframe.org
    """

    DEM = "DEM"
    COORDINATES = "COORDINATES"
    PERIMETER = "PERIMETER"
    OUTPUT = "OUTPUT"
    OUTPPR = "OUTPPR"
    FOLDEST = "FOLDEST"
    ADDTONAME = "ADDTONAME"
    SMALLAVA = "SMALLAVA"
    DATA_TYPE = "DATA_TYPE"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterRasterLayer(self.DEM, self.tr("DEM layer"))
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.COORDINATES,
                self.tr("Coordinate layer"),
                defaultValue="",
                types=[QgsProcessing.TypeVectorPoint],
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.PERIMETER,
                self.tr("Perimeter Layer"),
                defaultValue="",
                types=[QgsProcessing.TypeVectorAnyGeometry],
            )
        )

        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.FOLDEST, self.tr("Destination folder")
            )
        )

        self.addOutput(
            QgsProcessingOutputVectorLayer(
                self.OUTPUT,
                self.tr("Output layer"),
                QgsProcessing.TypeVectorAnyGeometry,
            )
        )

        self.addOutput(
            QgsProcessingOutputMultipleLayers(
                self.OUTPPR,
            )
        )

    def flags(self):
        return super().flags()

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        import avaframe.version as gv
        from . import avaframeConnector_commonFunc as cF

        feedback.pushInfo("AvaFrame Version: " + gv.getVersion())

        targetADDTONAME = ""

        # sourceDEM = self.parameterAsRasterLayer(parameters, self.DEM, context)
        # if sourceDEM is None:
        #     raise QgsProcessingException(self.invalidSourceError(parameters, self.DEM))
        #
        # sourcePerimeter = self.parameterAsVectorLayer(
        #     parameters, self.PERIMETER, context
        # )
        #
        # sourceCoordinates = self.parameterAsVectorLayer(
        #     parameters, self.COORDINATES, context
        # )
        #
        # sourceFOLDEST = self.parameterAsFile(parameters, self.FOLDEST, context)
        #
        # finalTargetDir, targetDir = cF.createFolderStructure(sourceFOLDEST)
        #
        # feedback.pushInfo(sourceDEM.source())
        #
        # cF.copyDEM(sourceDEM, targetDir)
        #
        # cF.copyShp(sourcePerimeter.source(), targetDir / "Inputs" / "POLYGONS")
        #
        # feedback.pushInfo('Starting the simulations')
        # feedback.pushInfo('This might take a while')
        # feedback.pushInfo('See console for progress')
        #
        # command = ['python', '-m', 'avaframe.runCom6Scarp', str(targetDir), '-fc', str(frictString)]
        # cF.runAndCheck(command, self, feedback)
        #
        # feedback.pushInfo('Done, start loading the results')
        #
        # cF.moveInputAndOutputFoldersToFinal(targetDir, finalTargetDir)
        #
        # try:
        #     rasterResults = cF.getLatestPeak(finalTargetDir)
        # except:
        #     raise QgsProcessingException(self.tr('Something went wrong with com6Scarp, please check log files'))
        #
        # allRasterLayers = cF.addStyleToCom6ScarpResults(rasterResults)
        #
        # context = cF.addLayersToContext(context, allRasterLayers, self.OUTPPR)

        feedback.pushInfo("\n---------------------------------")
        feedback.pushInfo("Done, find results and logs here:")
        # feedback.pushInfo(str(finalTargetDir.resolve()))
        feedback.pushInfo("---------------------------------\n")

        return {self.OUTPPR: allRasterLayers}

    def name(self):
        return "com6scarp"

    def displayName(self):
        return self.tr("Scarp (com6)")

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return "RockAvalancheExperimental"

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def shortHelpString(self) -> str:
        hstring = "Runs scarp  via module com6Scarp. \n\
                For more information go to (or use the help button below): \n\
                AvaFrame Documentation: https://docs.avaframe.org\n\
                Homepage: https://avaframe.org\n\
                Praxisleitfaden: https://avaframe.org/reports\n"

        return self.tr(hstring)

    def helpUrl(self):
        return "https://docs.avaframe.org/en/latest/connector.html"

    def createInstance(self):
        return runCom6ScarpAlgorithm()
